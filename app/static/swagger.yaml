openapi: "3.0.0"
info:
  title: "What's Next API"
  description: "API to manage daily class sessions, connecting students and teachers with modern, secure endpoints."
  version: "1.0.0"
servers:
  - url: "/"
    description: "Deployed API on AWS EC2"

paths:
  /auth/register:
    post:
      summary: "Register a new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          description: "User registered successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "Bad Request"
  /auth/login:
    post:
      summary: "Login a user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: "User logged in successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '401':
          description: "Unauthorized"
  /api/classes:
    get:
      summary: "Retrieve all class sessions"
      responses:
        '200':
          description: "List of class sessions"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassSession'
    post:
      summary: "Create a new class session"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassSessionInput'
      responses:
        '201':
          description: "Class session created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassSession'
        '400':
          description: "Bad Request"
  /api/classes/{id}:
    get:
      summary: "Retrieve a specific class session by ID"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the class session"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Class session details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassSession'
        '404':
          description: "Class session not found"
    put:
      summary: "Update an existing class session"
      security:
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the class session"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassSessionInput'
      responses:
        '200':
          description: "Class session updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassSession'
        '400':
          description: "Bad Request"
        '404':
          description: "Class session not found"
    delete:
      summary: "Delete a class session"
      security:
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the class session"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Class session deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: "Class session not found"
  /api/schedule:
    get:
      summary: "Retrieve the schedule for a given date"
      parameters:
        - name: "date"
          in: "query"
          description: "Date in DD-MM-YYYY format"
          required: true
          schema:
            type: string
            example: "25-03-2025"
      responses:
        '200':
          description: "Schedule for the given date"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassSession'
        '400':
          description: "Invalid or missing date query parameter"
components:
  schemas:
    ClassSession:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        date:
          type: string
          format: date
          example: "25-03-2025"
        start_time:
          type: string
          example: "08:30"
        end_time:
          type: string
          example: "10:00"
        professor_id:
          type: integer
        session_type:
          type: string
      required:
        - id
        - title
        - date
        - start_time
        - end_time
        - professor_id
        - session_type
    ClassSessionInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        date:
          type: string
          example: "25-03-2025"
        start_time:
          type: string
          example: "08:30"
        end_time:
          type: string
          example: "10:00"
        professor_id:
          type: integer
        session_type:
          type: string
      required:
        - title
        - date
        - start_time
        - end_time
        - professor_id
        - session_type
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
